{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * Vars:
 * - list_count: Number of list items
 * - list_item_divider: Boolean to add item border
 * - list_layout_type: Key for selecting layout type
 *
 * Content: List Paragraph field values
 * - field_wysiwyg: Intro content field
 * - field_list_items: List of paragraphs content to display(field_media,field_wysiwyg)
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'list-pattern',
    list_item_divider ? 'list-pattern--divider'
  ]
%}

{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
      {% if content.field_wysiwyg %}
        <div class="row list-pattern__intro mb-3">
          <div class="col">{{ content.field_wysiwyg }}</div>
        </div>
      {% endif %}
      {% for key, item in content.field_list_items if key|first != '#' %}
        {% set loopEnd = (loop.index == list_count) ? true : false %}
        {% if list_layout_type == '2col__8_4' %}
          {% if loopEnd %}
            <div class="row list-pattern__item">
          {% else %}
            <div class="row list-pattern__item mb-3 mb-lg-5">
          {% endif %}
            <div class="col-md-8">{{ item['#paragraph'].field_wysiwyg[0].value|raw }}</div>
            {% if item['#paragraph'].field_media[0] %}
              <div class="col-md-4 mb-2 mb-md-0">{{ drupal_image(item['#paragraph'].field_media[0].entity.field_media_image.entity.uri.value, 'content_media_list', {alt: item['#paragraph'].field_media[0].entity.field_media_image.alt|t}, responsive=true) }}</div>
            {% endif %}
          </div>
        {% elseif list_layout_type == '2col__3_9' %}
          {% if loopEnd %}
            <div class="row list-pattern__item">
          {% else %}
            <div class="row list-pattern__item mb-3 mb-lg-5">
          {% endif %}
            {% if item['#paragraph'].field_media[0] %}
              <div class="col-md-3 mb-2 mb-md-0">{{ drupal_image(item['#paragraph'].field_media[0].entity.field_media_image.entity.uri.value, 'content_media_list', {alt: item['#paragraph'].field_media[0].entity.field_media_image.alt|t}, responsive=true) }}</div>
            {% endif %}
            <div class="col-md-9">{{ item['#paragraph'].field_wysiwyg[0].value|raw }}</div>
          </div>
          {% elseif list_layout_type == '2col__9_3' %}
          {% if loopEnd %}
            <div class="row list-pattern__item">
          {% else %}
            <div class="row list-pattern__item mb-3 mb-lg-5">
          {% endif %}
            <div class="col-md-9">{{ item['#paragraph'].field_wysiwyg[0].value|raw }}</div>
            {% if item['#paragraph'].field_media[0] %}
              <div class="col-md-3 mb-2 mb-md-0">{{ drupal_image(item['#paragraph'].field_media[0].entity.field_media_image.entity.uri.value, 'content_media_list', {alt: item['#paragraph'].field_media[0].entity.field_media_image.alt|t}, responsive=true) }}</div>
            {% endif %}
          </div>
        {% else %}
          {% if loopEnd %}
            <div class="row list-pattern__item">
          {% else %}
            <div class="row list-pattern__item mb-3 mb-lg-5">
          {% endif %}
            {% if item['#paragraph'].field_media[0] %}
              <div class="col-md-4 mb-2 mb-md-0">{{ drupal_image(item['#paragraph'].field_media[0].entity.field_media_image.entity.uri.value, 'content_media_list', {alt: item['#paragraph'].field_media[0].entity.field_media_image.alt|t}, responsive=true) }}</div>
            {% endif %}
            <div class="col-md-8">{{ item['#paragraph'].field_wysiwyg[0].value|raw }}</div>
          </div>
        {% endif %}
      {% endfor %}
    {% endblock content %}
  </div>
{% endblock paragraph %}
