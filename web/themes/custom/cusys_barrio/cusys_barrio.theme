<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;
use Drupal\content_moderation\Entity\ContentModerationState;
use Drupal\Core\Template\Attribute;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function cusys_barrio_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];

  $form['fonts']['fonts']['bootstrap_barrio_google_fonts']['#options']['helvetic_neue'] = 'Helvetica Neue';
  $form['fonts']['fonts']['bootstrap_barrio_google_fonts']['#options']['roboto'] = 'Roboto';
  
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function cusys_barrio_preprocess_html(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    // Determine if node is published
    $content_moderation_state = ContentModerationState::loadFromModeratedEntity($node);
    if($node->getType() == 'page' && $content_moderation_state->get('moderation_state')->value != 'published') {
      $variables['is_unpublished'] = true;
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function cusys_barrio_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    
    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['active']])
      ];
    }
    $variables['#cache']['contexts'][] = 'url';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function cusys_barrio_preprocess_page(&$variables){
  // Add CU fonts - Helvetica Neue
  $fonts = theme_get_setting('bootstrap_barrio_google_fonts');
  if ($fonts){
    $variables['#attached']['library'][] = (in_array($fonts, ['helvetic_neue', 'roboto']) ? 'cusys_barrio' : 'bootstrap_barrio' ) . '/' . $fonts;
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function cusys_barrio_preprocess_block(&$variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    // Pass in Page awareness
    if ($variables['base_plugin_id'] == 'system_branding_block') {
      $variables['mobile_logo'] = str_replace('cu-online', 'cu-mobile', theme_get_setting('logo.url'));
      $variables['logo_linked'] = TRUE;
      if ($node->bundle() == 'landing_page') {
        $variables['logo_linked'] = FALSE;   
      }

      // Add a clearfix class to branding blocks.
      $variables['attributes']['class'][] = 'clearfix';
    } else if ($variables['base_plugin_id'] == 'views_block') {
      // Page Hero
      if ($variables['derivative_plugin_id'] == 'page_hero-block_1'){
        //$variables['page_type'] = $node->bundle();
        
        $variables['attributes']['class'][] = 'featured-top';
        $variables['attributes']['class'][] = 'hero';
        $variables['attributes']['class'][] = 'hero-page-type-'.$node->bundle();

        // Determine if there is a form
        if(isset($variables['elements']['content']['#view'])){
          $variables['node-view'] = $variables['elements']['content']['#view']->result[0]->_entity;
          if ($variables['node-view'] instanceof \Drupal\node\Entity\Node) {
            if ($variables['node-view']->hasField('field_webform') && !$variables['node-view']->field_webform->isEmpty()) {
              $variables['attributes']['class'][] = 'hero-form';
              $variables['#attached']['library'][] = 'bootstrap_barrio/form';
            }
          }
        }
      }
    }
    
  }
}

/**
 * Implements hook_preprocess_views_view() for views-view.html.twig.
 */
function cusys_barrio_preprocess_views_view_fields__page_hero__block(&$variables) {
  // Attach card styles.
  $variables['#attached']['library'][] = 'cusys_barrio/hero';

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $variables['page_type'] = $node->bundle();
    $variables['page_title'] = $node->getTitle();
    $variables['page_subtitle'] = $node->get('field_subtitle')->value;
  }
}

/**
 * Implements hook_preprocess_paragraph__layout_cu_systems()
 */
function cusys_barrio_preprocess_paragraph__layout_cu_systems(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $variables['bg_color'] = $paragraph->get('field_background_color')->value;
  $variables['text_color'] = $paragraph->get('field_text_color')->value;
  $variables['margin_top'] = $paragraph->get('field_margin_top')->value;
  $variables['margin_bottom'] = $paragraph->get('field_margin_bottom')->value;
  $variables['padding_top'] = $paragraph->get('field_padding_top')->value;
  $variables['padding_bottom'] = $paragraph->get('field_padding_bottom')->value;
  // Add layout setting to region for handling by layout twig
  $variables['content']['regions']['#settings']['cusys_column_setting'] = $paragraph->get('field_column_layout_setting')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_media()
 */
function cusys_barrio_preprocess_paragraph__content_media(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $variables['is_figure'] = $paragraph->get('field_caption')->value ? true : false;
  $variables['caption_align'] = $paragraph->get('field_caption_alignment')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_horizontal_rule()
 */
function cusys_barrio_preprocess_paragraph__content_horizontal_rule(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $variables['border_color'] = $paragraph->get('field_border_color')->value;
  $variables['padding_tb'] = $paragraph->get('field_padding_top_bottom')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_list()
 */
function cusys_barrio_preprocess_paragraph__content_list(&$variables) {
  // Attach card styles.
  $variables['#attached']['library'][] = 'cusys_barrio/list_pattern';

  $paragraph = $variables['elements']['#paragraph'];
  $variables['list_count'] = $paragraph->get('field_list_items')->count();
  $variables['list_layout_type'] = $paragraph->get('field_list_layout_type')->value;
  $variables['list_item_divider'] = $paragraph->get('field_list_item_divider')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_card()
 */
function cusys_barrio_preprocess_paragraph__content_card(&$variables) {
  // Attach card styles.
  $variables['#attached']['library'][] = 'cusys_barrio/card';

  $paragraph = $variables['elements']['#paragraph'];
  $variables['overlay_link'] = $paragraph->get('field_link')->first() ? $paragraph->get('field_link')->first()->getUrl() : '';
  $variables['overlay_link_title'] = $paragraph->get('field_link')->first() ? $paragraph->get('field_link')->first()->title : '';
  $variables['text_position'] = $paragraph->get('field_text_position')->value;
  $variables['card_header_bg_color'] = $paragraph->get('field_card_header_bg_color')->value;
  $variables['card_footer_bg_color'] = $paragraph->get('field_card_footer_bg_color')->value;
  $variables['card_horizontal_rule'] = $paragraph->get('field_card_horizontal_rule')->value;
  $variables['card_image_type'] = $paragraph->get('field_card_image_type')->value;
  $variables['text_alignment'] = $paragraph->get('field_text_alignment')->value;
  $variables['padding_top'] = $paragraph->get('field_padding_top')->value;
  $variables['padding_right'] = $paragraph->get('field_padding_right')->value;
  $variables['padding_bottom'] = $paragraph->get('field_padding_bottom')->value;
  $variables['padding_left'] = $paragraph->get('field_padding_left')->value;
  $variables['text_color'] = $paragraph->get('field_text_color')->value;
  $variables['border_color'] = $paragraph->get('field_border_color')->value;
  $variables['text_color_cu'] = $paragraph->get('field_text_color_cu')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_points_of_pride()
 */
function cusys_barrio_preprocess_paragraph__content_points_of_pride(&$variables) {
  // Attach card styles.
  $variables['#attached']['library'][] = 'cusys_barrio/points_of_pride';

  $paragraph = $variables['elements']['#paragraph'];
  $variables['text_position'] = $paragraph->get('field_text_position')->value;
}

/**
 * Implements hook_preprocess_paragraph__content_quote()
 */
function cusys_barrio_preprocess_paragraph__content_quote(&$variables) {
  // Attach card styles.
  $variables['#attached']['library'][] = 'cusys_barrio/quote';

  $paragraph = $variables['elements']['#paragraph'];
  $variables['image_position'] = $paragraph->get('field_image_position')->value;
  $variables['text_alignment'] = $paragraph->get('field_text_alignment')->value;
}

/**
 * Implements hook_preprocess_views_view() for views-view-fields--paag-base-fields--block.html.twig.
 */
function cusys_barrio_preprocess_views_view_fields__paag_base_fields__block(&$variables) {
  $variables['#attached']['library'][] = 'cusys_barrio/program_at_a_glance';
  $variables['#attached']['library'][] = 'cusys_barrio/card';

  $view = $variables['view'];
  $variables['f_application_deadline'] = '';
  foreach ($view->result as $key => $result) {
    if($result->_entity->get('field_full_name')->getValue()) {
     $variables['f_name'] = $result->_entity->get('field_full_name')->getValue()[0]['value'];
    } else {
     $variables['f_name'] = $result->_entity->get('name')->getValue()[0]['value'];
    }
    /** #TODO Need to apply media field to pull through view */
    if($result->_entity->get('field_campus')->getValue()) {
      $campus_term = $result->_entity->get('field_campus')->getValue()[0]['target_id'];
      if($campus_term == 143) {
        $variables['f_media'] = 'public://2021-10/CULockup_Boulder_Logo.png';
      } elseif($campus_term == 145) {
        $variables['f_media'] = 'public://2021-10/CULockup_Denver_Logo.png';
      } elseif($campus_term == 144) {
        $variables['f_media'] = 'public://2021-10/CULockup_ColoradoSprings_Logo.png';
      } elseif($campus_term == 146) {
        $variables['f_media'] = 'public://2021-10/ULockup_Anschutz_Logo.png';
      }
    } else {
      $variables['f_media'] = '';
    }
    if($result->_entity->get('field_campus')->getValue()) {
      $variables['f_campus'] = Term::load($result->_entity->get('field_campus')->getValue()[0]['target_id'])->get('name')->value;
    } else {
      $variables['f_campus'] = '';
    }
    if($result->_entity->get('field_in_state_cost')->getValue()) {
      $variables['f_in_state_cost'] = $result->_entity->get('field_in_state_cost')->getValue()[0]['value'];
    } else {
      $variables['f_in_state_cost'] = '';
    }
    if($result->_entity->get('field_in_state_disclaimer')->getValue()) {
      $variables['f_in_state_disclaimer'] = Term::load($result->_entity->get('field_in_state_disclaimer')->getValue()[0]['target_id'])->get('description')->value;
    } else {
      $variables['f_in_state_disclaimer'] = '';
    }
    if($result->_entity->get('field_out_of_state_cost')->getValue()) {
      $variables['f_out_of_state_cost'] = $result->_entity->get('field_out_of_state_cost')->getValue()[0]['value'];
    } else {
      $variables['f_out_of_state_cost'] = '';
    }
    if($result->_entity->get('field_out_of_state_disclaimer')->getValue()) {
      $variables['f_out_of_state_disclaimer'] = Term::load($result->_entity->get('field_out_of_state_disclaimer')->getValue()[0]['target_id'])->get('description')->value;
    } else {
      $variables['f_out_of_state_disclaimer'] = '';
    }
    if($result->_entity->get('field_no_tuition_disclaimer')->getValue()) {
      $variables['f_no_tuition_disclaimer'] = Term::load($result->_entity->get('field_no_tuition_disclaimer')->getValue()[0]['target_id'])->get('description')->value;
    } else {
      $variables['f_no_tuition_disclaimer'] = '';
    }
    if($result->_entity->get('field_application_deadline')->getValue()) {
      $today = date('Y-m-d');
      foreach($result->_entity->get('field_application_deadline')->getValue() as $bob => $my_date) {
        if(strtotime($my_date['value']) >= strtotime($today)) {
          $variables['f_application_deadline'] = $my_date['value'];
          break;
        }
      }
    }
    if($result->_entity->get('field_credit_hours')->getValue()) {
      $variables['f_credit_hours'] = $result->_entity->get('field_credit_hours')->getValue()[0]['value'];
    } else {
      $variables['f_credit_hours'] = '';
    }
  }
}

/**
 * Implements hook_preprocess_views_view() for views-view.html.twig.
 *
*function cusys_barrio_preprocess_views_view_field(&$variables) {
*  $view = $variables['view'];
*  if($view->id() == 'paag_base_fields') {
*    if($variables['field']->field == 'field_full_name') {
*      $my_field_value = $variables['field']->getValue($variables['row']);
*      $my_altered_value = 'xx';
*      $variables['output'] = $my_altered_value;
*      $variables['me_output'] = $my_field_value;
*    }
*  }
*}
*/

/**
 * Implements hook_preprocess_views_view__program_list__block() for views-view--program-list--block.html.twig.
 */
function cusys_barrio_preprocess_views_view__program_list__block(&$variables) {
  $variables['#attached']['library'][] = 'cusys_barrio/program_list';
}


/**
 * Implements hook_preprocess_HOOK() for styleguide.
 */
function cusys_barrio_preprocess_simple_styleguide(&$variables) {
  $variables['#attached']['library'][] = 'cusys_barrio/styleguide';
}